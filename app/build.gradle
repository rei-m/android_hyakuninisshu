apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.android.gms.oss-licenses-plugin'

repositories {
    mavenCentral()
}

configurations {
    ktlint
}

dependencies {
    ktlint "com.github.shyiko:ktlint:0.31.0"
    // additional 3rd party ruleset(s) can be specified here
    // just add them to the classpath (e.g. ktlint 'groupId:artifactId:version') and
    // ktlint will pick them up
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/shyiko/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "-F", "src/**/*.kt"
}

android {
    if ((new File('./signingConfigs/releaseConfig.gradle')).exists()) {
        apply from: '../signingConfigs/releaseConfig.gradle', to: android
    } else {
        signingConfigs {
            releaseConfig
        }
    }

    compileSdkVersion rootProject.ext.compile_sdk_version
    buildToolsVersion rootProject.ext.build_tools_version

    defaultConfig {
        applicationId "me.rei_m.hyakuninisshu"
        minSdkVersion rootProject.ext.min_sdk_version
        targetSdkVersion rootProject.ext.target_sdk_version
        versionCode rootProject.ext.version_code
        versionName rootProject.ext.version_name
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [crashlyticsEnabled: true]
    }

    buildTypes {
        debug {
            debuggable true
            applicationIdSuffix ".debug"
            versionNameSuffix "d"
            manifestPlaceholders = [crashlyticsEnabled: false]
        }
        release {
            signingConfig signingConfigs.releaseConfig
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [crashlyticsEnabled: true]
        }
    }
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    buildFeatures {
        dataBinding = true
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

apply from: rootProject.file('gradle/dependencies/dagger.gradle'), to: dependencies

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation project(':domain')
    implementation project(':infrastructure')
    implementation project(':feature:corecomponent')

    implementation project(':feature:splash')
    implementation project(':feature:question')
    implementation project(':feature:trainingmenu')
    implementation project(':feature:trainingstarter')
    implementation project(':feature:trainingresult')
    implementation project(':feature:exammenu')
    implementation project(':feature:examstarter')
    implementation project(':feature:examresult')
    implementation project(':feature:examhistory')
    implementation project(':feature:material')
    implementation project(':feature:materialedit')
    implementation project(':feature:support')

    implementation 'com.github.hotchemi:android-rate:1.0.1'

    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakcanary_version"
}

task addAppLicenseTask {
    final String UTF_8 = "UTF-8"
    final byte[] LINE_SEPARATOR = System.getProperty("line.separator").getBytes(UTF_8)

    mustRunAfter tasks.findByName('generateLicenses')

    doLast {
        def dependencyOutput = new File(project.buildDir, "generated/third_party_licenses")

        def resourceOutput = new File(dependencyOutput, "/res")
        def outputDir = new File(resourceOutput, "/raw")


        def licensesFile = new File(outputDir, "third_party_licenses")
        def licensesMetadataFile = new File(outputDir, "third_party_license_metadata")

        def start = licensesFile.length()

        def fontLicenseContent = """
ライセンスはIPAフォントに準拠します。
http://ipafont.ipa.go.jp/ipa_font_license_v1.html
"""
        licensesFile << fontLicenseContent
        licensesFile << (LINE_SEPARATOR)

        licensesMetadataFile << ("${start}:${fontLicenseContent.getBytes("UTF-8").size()} はんなり明朝")
        licensesMetadataFile << (LINE_SEPARATOR)
    }
}

// preBuild前にライセンス情報を追加する
tasks.findByPath(':app:preBuild').dependsOn addAppLicenseTask

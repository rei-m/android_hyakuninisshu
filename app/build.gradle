/*
 * Copyright (c) 2020. Rei Matsushita
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See
 * the License for the specific language governing permissions and limitations under the License.
 */

import dependencies.Deps
import dependencies.Versions
import dependencies.Packages
import dependencies.Projects

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.android.gms.oss-licenses-plugin'

repositories {
    mavenCentral()
}

configurations {
    ktlint
}

dependencies {
    ktlint Deps.ktlint
    // additional 3rd party ruleset(s) can be specified here
    // just add them to the classpath (e.g. ktlint 'groupId:artifactId:version') and
    // ktlint will pick them up
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/shyiko/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "-F", "src/**/*.kt"
}

android {
    if ((new File('./signingConfigs/releaseConfig.gradle')).exists()) {
        apply from: '../signingConfigs/releaseConfig.gradle', to: android
    } else {
        signingConfigs {
            releaseConfig
        }
    }

    compileSdkVersion Versions.compileSdkVersion

    defaultConfig {
        applicationId Packages.applicationId
        minSdkVersion Versions.minSdkVersion
        targetSdkVersion Versions.targetSdkVersion
        versionCode Versions.versionCode
        versionName Versions.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [crashlyticsEnabled: true]
    }

    buildTypes {
        debug {
            debuggable true
            applicationIdSuffix Packages.applicationIdSuffix
            versionNameSuffix Packages.versionNameSuffix
            manifestPlaceholders = [crashlyticsEnabled: false]
        }
        release {
            signingConfig signingConfigs.releaseConfig
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [crashlyticsEnabled: true]
        }
    }
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    buildFeatures {
        dataBinding = true
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation Deps.Kotlin.kotlinStdlibJdk7

    implementation project(Projects.domain)
    implementation project(Projects.infrastructure)
    implementation project(Projects.Feature.corecomponent)
    implementation project(Projects.Feature.splash)
    implementation project(Projects.Feature.question)
    implementation project(Projects.Feature.trainingmenu)
    implementation project(Projects.Feature.trainingstarter)
    implementation project(Projects.Feature.trainingresult)
    implementation project(Projects.Feature.exammenu)
    implementation project(Projects.Feature.examstarter)
    implementation project(Projects.Feature.examresult)
    implementation project(Projects.Feature.examhistory)
    implementation project(Projects.Feature.material)
    implementation project(Projects.Feature.materialEdit)
    implementation project(Projects.Feature.support)

    implementation Deps.Dagger.dagger
    implementation Deps.Dagger.daggerAndroid
    implementation Deps.Dagger.daggerAndroidSupport
    kapt Deps.Dagger.daggerCompiler
    kapt Deps.Dagger.daggerAndroidProcessor

    implementation Deps.androidRate

    debugImplementation Deps.leakCanary
}

task addAppLicenseTask {
    final String UTF_8 = "UTF-8"
    final byte[] LINE_SEPARATOR = System.getProperty("line.separator").getBytes(UTF_8)

    mustRunAfter tasks.findByName('generateLicenses')

    doLast {
        def dependencyOutput = new File(project.buildDir, "generated/third_party_licenses")

        def resourceOutput = new File(dependencyOutput, "/res")
        def outputDir = new File(resourceOutput, "/raw")


        def licensesFile = new File(outputDir, "third_party_licenses")
        def licensesMetadataFile = new File(outputDir, "third_party_license_metadata")

        def start = licensesFile.length()

        def fontLicenseContent = """
ライセンスはIPAフォントに準拠します。
http://ipafont.ipa.go.jp/ipa_font_license_v1.html
"""
        licensesFile << fontLicenseContent
        licensesFile << (LINE_SEPARATOR)

        licensesMetadataFile << ("${start}:${fontLicenseContent.getBytes("UTF-8").size()} はんなり明朝")
        licensesMetadataFile << (LINE_SEPARATOR)
    }
}

// preBuild前にライセンス情報を追加する
tasks.findByPath(':app:preBuild').dependsOn addAppLicenseTask

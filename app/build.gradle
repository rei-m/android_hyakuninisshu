apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'

repositories {
    mavenCentral()
}

configurations {
    ktlint
}

dependencies {
    ktlint "com.github.shyiko:ktlint:0.27.0"
    // additional 3rd party ruleset(s) can be specified here
    // just add them to the classpath (e.g. ktlint 'groupId:artifactId:version') and
    // ktlint will pick them up
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/shyiko/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "-F", "src/**/*.kt"
}

android {
    signingConfigs {
        releaseConfig
    }

    if (project.hasProperty('storeFile')) {
        android.signingConfigs.releaseConfig.storeFile = file(storeFile)
    }
    if (project.hasProperty('storePassword')) {
        android.signingConfigs.releaseConfig.storePassword = storePassword
    }
    if (project.hasProperty('keyAlias')) {
        android.signingConfigs.releaseConfig.keyAlias = keyAlias
    }
    if (project.hasProperty('keyPassword')) {
        android.signingConfigs.releaseConfig.keyPassword = keyPassword
    }

    compileSdkVersion 28
    buildToolsVersion "28.0.2"
    defaultConfig {
        applicationId "me.rei_m.hyakuninisshu"
        minSdkVersion 16
        targetSdkVersion 28
        multiDexEnabled true
        versionCode 16
        versionName "2.0.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        manifestPlaceholders = [crashlyticsEnabled: true]
    }

    buildTypes {
        debug {
            debuggable true
            applicationIdSuffix ".debug"
            versionNameSuffix "d"
            manifestPlaceholders = [crashlyticsEnabled: false]
        }
        release {
            signingConfig signingConfigs.releaseConfig
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [crashlyticsEnabled: true]
        }
    }
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }
    dataBinding {
        enabled = true
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    kotlin {
        experimental {
            coroutines 'enable'
        }
    }
}

dependencies {
    def android_support_lib_version = '28.0.0-rc01'
    def rxjava_version = '2.2.0'
    def dagger_version = '2.17'
    def leakcanary_version = '1.6.1'
    def lifecycle_version = "1.1.1"
    def coroutines_version = '0.24.0'

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    implementation "com.android.support:appcompat-v7:$android_support_lib_version"
    implementation "com.android.support:support-v4:$android_support_lib_version"
    implementation "com.android.support:percent:$android_support_lib_version"
    implementation "com.android.support:design:$android_support_lib_version"
    implementation "com.android.support:support-annotations:$android_support_lib_version"
    implementation "com.android.support:customtabs:$android_support_lib_version"
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    implementation 'com.android.support:multidex:1.0.3'
    implementation "com.google.firebase:firebase-core:16.0.1"
    implementation "com.google.android.gms:play-services-ads:15.0.1"

    implementation "android.arch.lifecycle:extensions:$lifecycle_version"
    implementation "android.arch.lifecycle:reactivestreams:$lifecycle_version"
    testImplementation "android.arch.core:core-testing:$lifecycle_version"

    compileOnly 'javax.annotation:jsr250-api:1.0'
    implementation "com.google.dagger:dagger:$dagger_version"
    implementation "com.google.dagger:dagger-android:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    implementation "io.reactivex.rxjava2:rxjava:$rxjava_version"
    implementation "io.reactivex.rxjava2:rxandroid:2.1.0"
    implementation 'com.squareup.moshi:moshi:1.6.0'
    implementation 'com.squareup.moshi:moshi-kotlin:1.6.0'

    implementation 'com.github.bumptech.glide:glide:4.8.0'
    kapt 'com.github.bumptech.glide:compiler:4.8.0'

    implementation 'com.github.hotchemi:android-rate:1.0.1'

    implementation 'com.github.gfx.android.orma:orma:4.2.5'
    kapt 'com.github.gfx.android.orma:orma-processor:4.2.5'

    implementation 'com.jakewharton.timber:timber:4.7.1'

    implementation 'com.crashlytics.sdk.android:crashlytics:2.9.4'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.assertj:assertj-core:3.11.0'
    testImplementation 'org.robolectric:robolectric:3.6.1'
    testImplementation 'org.robolectric:shadows-multidex:3.6.1'
    testImplementation 'com.nhaarman:mockito-kotlin:1.6.0'
    testImplementation('com.android.support.test:runner:1.0.2') {
        exclude module: 'support-annotations'
    }
    testImplementation('com.android.support.test:rules:1.0.2') {
        exclude module: 'support-annotations'
    }

    androidTestImplementation('com.android.support.test.espresso:espresso-core:3.0.2') {
        exclude module: 'support-annotations'
        exclude group: 'com.google.code.findbugs'
    }
    androidTestImplementation('com.android.support.test.espresso:espresso-intents:3.0.2') {
        exclude module: 'support-annotations'
        exclude group: 'com.google.code.findbugs'
    }
    androidTestImplementation('com.android.support.test:runner:1.0.2') {
        exclude module: 'support-annotations'
    }
    androidTestImplementation('com.android.support.test:rules:1.0.2') {
        exclude module: 'support-annotations'
    }
    androidTestImplementation 'com.nhaarman:mockito-kotlin:1.6.0'
    androidTestImplementation 'com.google.dexmaker:dexmaker:1.2'
    androidTestImplementation 'com.google.dexmaker:dexmaker-mockito:1.2'

    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakcanary_version"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakcanary_version"
    androidTestImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakcanary_version"
    testImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakcanary_version"
}

apply plugin: 'com.google.gms.google-services'